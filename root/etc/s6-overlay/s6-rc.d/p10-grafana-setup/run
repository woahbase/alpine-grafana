#!/usr/bin/with-contenv bash
set -e

vecho () { if [ "${S6_VERBOSITY:-1}" -gt 0 ]; then echo "[$0] $@"; fi; }
usercmd () { if [ "X${EUID}" != "X0" ]; then ${1} "${@:2}"; else s6-setuidgid ${PUID:-1000}:${PGID:-1000} ${1} "${@:2}"; fi; }

GRAFANA_HOME="${GRAFANA_HOME:-/var/lib/grafana}";

GF_PATHS_CONFIG="${GF_PATHS_CONFIG:-$GRAFANA_HOME/conf/defaults.ini}";
GF_PATHS_DATA="${GF_PATHS_DATA:-$GRAFANA_HOME/data}";
GF_PATHS_HOME="${GF_PATHS_HOME:-$GRAFANA_HOME}";
GF_PATHS_LOGS="${GRAFANA_HOME}/logs";
GF_PATHS_PLUGINS="${GF_PATHS_PLUGINS:-$GRAFANA_HOME/plugins}";
GF_PATHS_PROVISIONING="${GF_PATHS_PROVISIONING:-$GRAFANA_HOME/provisioning}";

# make needed directories
vecho "Ensure configuration directories exist.";
mkdir -p \
    "${GF_PATHS_DATA}" \
    "${GF_PATHS_HOME}" \
    "${GF_PATHS_LOGS}" \
    "${GF_PATHS_PLUGINS}" \
    "${GF_PATHS_PROVISIONING}" \
    "${GF_PATHS_PROVISIONING}/access-control" \
    "${GF_PATHS_PROVISIONING}/alerting" \
    "${GF_PATHS_PROVISIONING}/dashboards" \
    "${GF_PATHS_PROVISIONING}/datasources" \
    "${GF_PATHS_PROVISIONING}/notifiers" \
    "${GF_PATHS_PROVISIONING}/plugins" \
    "${GRAFANA_HOME}/dashboards" \
    ;

_subst () {
    GF_PATHS_CONFIGDIR="$(dirname $GF_PATHS_CONFIG)";
    sed \
        -e "s|GRAFANA_HOME|${GRAFANA_HOME}|g" \
        -e "s|GF_PATHS_CONFIGDIR|${GF_PATHS_CONFIGDIR}|g" \
    $1 > $2;
}

# ensure grafana conf exists
if [ ! -f "${GF_PATHS_CONFIG}" ];
then
    vecho "Setting up default configurations at ${GF_PATHS_CONFIG}";
    mkdir -p $(dirname "${GF_PATHS_CONFIG}") \
    && _subst /defaults/defaults.ini ${GF_PATHS_CONFIG};
fi;

# ensure aws credentials exists, if specified per profile
if [ ! -f "${GF_PATHS_HOME}/.aws/credentials" ] \
&& [ ! -z "${GF_AWS_PROFILES+x}" ];
then
    vecho "Setting up AWS credentials/profiles";
    mkdir -p ${GF_PATHS_HOME}/.aws/;
    touch ${GF_PATHS_HOME}/.aws/credentials;

    for profile in ${GF_AWS_PROFILES};
    do
        access_key_varname="GF_AWS_${profile}_ACCESS_KEY_ID";
        secret_key_varname="GF_AWS_${profile}_SECRET_ACCESS_KEY";
        region_varname="GF_AWS_${profile}_REGION";

        if [ ! -z "${!access_key_varname}" -a ! -z "${!secret_key_varname}" ];
        then
            echo "[${profile}]" >> ${GF_PATHS_HOME}/.aws/credentials;
            echo "aws_access_key_id = ${!access_key_varname}" >> ${GF_PATHS_HOME}/.aws/credentials;
            echo "aws_secret_access_key = ${!secret_key_varname}" >> ${GF_PATHS_HOME}/.aws/credentials;
            if [ ! -z "${!region_varname}" ];
            then
                echo "region = ${!region_varname}" >> ${GF_PATHS_HOME}/.aws/credentials;
            fi;
        fi;
    done;

    # chown grafana:grafana -R ${GF_PATHS_HOME}/.aws
    chmod 600 ${GF_PATHS_HOME}/.aws/credentials;
fi;

# fix permissions
if [ -z "${GRAFANA_SKIP_PERMFIX}" ] \
&& [ "X${EUID}" == "X0" ]; # requires root
then
    vecho "Fixing permissions.";
    find "${GRAFANA_HOME}" "${GF_PATHS_HOME}" \
        \! -user ${S6_USER:-alpine} -exec \
        chown --no-dereference \
        ${S6_USER:-alpine}:${PGID:-1000} \
        '{}' +;
fi;

# install plugins as needed
if [ ! -z "${GF_INSTALL_PLUGINS}" ]; then
    OLDIFS=$IFS;
    IFS=',';
    set -e ;
    for plugin in ${GF_INSTALL_PLUGINS};
    do
        IFS=$OLDIFS;
        if expr match "$plugin" '.*\;.*';
        then
            pluginUrl=$(echo "$plugin" | cut -d';' -f 1);
            pluginInstallFolder=$(echo "$plugin" | cut -d';' -f 2);
            vecho "Installing ${pluginUrl} at ${pluginInstallFolder}";
            usercmd \
                grafana cli --pluginUrl ${pluginUrl} --pluginsDir "${GF_PATHS_PLUGINS}" \
                plugins install "${pluginInstallFolder}";
        else
            vecho "Installing ${plugin}";
            usercmd \
                grafana cli --pluginsDir "${GF_PATHS_PLUGINS}" plugins install ${plugin};
        fi;
    done;
    IFS=$OLDIFS;
fi;

# update all plugins
if [ ! -z "${GF_UPDATE_PLUGINS}" ];
then
    vecho "Updating Plugins...";
    usercmd exec \
        grafana cli --pluginsDir "${GF_PATHS_PLUGINS}" plugins update-all;
fi;
